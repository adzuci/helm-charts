---
app: 
    name: my-app
    image:
        tag: 133d963baf5daa915f47a2143c4d076a92302e99-newrelic
        repository: openedx/my-app
    role_arn: '' #arn:aws:iam::77777777:role/prod-my-app
    command: 'gunicorn --workers=2 --name my_app -c /edx/app/my_app/my_app/docker_gunicorn_configuration.py --log-file - --max-requests=1000 my_app.wsgi:application'
    secret_file_env_name: MY_APP_CFG
    secret_file_name: my_app.yml
    service_account_name: my-app
    extraEnvs: []
        # - name: MY_ENV
        #   value: myvalue
    migrations:
        name: my-app-migrations
        enabled: true
        database_migrate_user: migrate001
        migrate_db_user_env_name: DB_MIGRATION_USER
        migrate_db_pass_env_name: DB_MIGRATION_PASS

    autoscaling:
        enabled: true
        minReplicas: 3
        maxReplicas: 10
        targetCPUUtilizationPercentage: 50

    config: {} # Your yaml config goes here


workers: []
    # - name: my-app-worker
    #   command: celery -A my_app worker --loglevel info

newrelic:
    enabled: true
    app_name: prod-my-app
    log_level: info

collectstatic:
    enabled: false
    job_name: my-app-collectstatic
    s3_bucket: s3://prod-my-app-assets
    asset_write_role: arn:aws:iam::77777777:role/prod-my-app-assets-rw
    
vault:
    enabled: true
    vault_role: my-app
    vault_addr: http://prod-vault.vault:8200
    secret_name: kv/my-app
    secret_version: 1

ingresses: []
    # - host: my-app.edx.org
    #   class: public

    # - host: my-app-internal.edx.org
    #   class: internal
    #   allow_django_admin: true

cronjobs: []
    # - name: my-app-retire-old-licenses
    #   schedule: 0 13 * * *
    #   command: /edx/app/my_app/manage.py retire_old_licenses

development_mysql:
    enabled: false
    name: mysql
    fullnameOverride: mysql
    image: mysql
    imageTag: 5.6.45
    # We create the secret ourselves in templates/secrets.yaml
    # Defining the name of the secret in templates/_helpers.tpl
    # and use the existing secret directive to tell the mysql chart not to create
    # secrets to use ours instead.
    # this is done so we can use the secret from our values.yaml since mysql and
    # the django application need to have the same DB password.
    # This is a common practice in the helm stable charts
    # https://github.com/helm/charts/tree/master/stable
    # as these charts are often used to compose higher level charts.
    # but should be able to run on their own out of the box.
    mysqlDatabase: db
    mysqlUser: db-user
    mysqlPassword: db-pass

development_elasticsearch:
    enabled: false
    name: elasticsearch
    esMajorVersion: 1
    image: elasticsearch
    imageTag: "1.5.2"
    clusterName: "elasticsearch"
    # Permit co-located instances for solitary minikube virtual machines.
    antiAffinity: "soft"

    # Shrink default JVM heap.
    esJavaOpts: "-Xmx128m -Xms128m"

    # Allocate smaller chunks of memory per pod.
    resources:
        requests:
        cpu: "100m"
        memory: "512M"
        limits:
        cpu: "250m"
        memory: "512M"

    # Request smaller persistent volumes.
    volumeClaimTemplate:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "standard"
        resources:
        requests:
            storage: 100M
